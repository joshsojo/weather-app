{"version":3,"sources":["redux/weather/weather.types.js","redux/weather/weather.reducer.js","redux/select/select.types.js","redux/select/select.reducer.js","redux/root.reducer.js","redux/store.js","utils.js","components/weather-badge/weather-badge.component.jsx","components/switch-metric/switch-metric.component.jsx","redux/weather/weather.actions.js","components/weather-details/weather-details.component.jsx","components/side-details/side-details.component.jsx","components/weather-container/weather-container.component.jsx","components/search/search.component.jsx","redux/select/select.actions.js","pages/weather-page/weather-page.component.jsx","App.js","serviceWorker.js","index.js"],"names":["WeatherActionTypes","BUTTON_CLICKED","GET_WEATHER","INITIAL_STATE","celcius","weatherData","weatherReducer","state","action","type","payload","SelectDetailsActionTypes","SELECT_COUNTRY","SET_COUNTRIES","SELECT_STATE","SET_STATES","SELECT_CITY","SET_CITIES","selectedCountry","selectedState","selectedCity","countries","states","cities","selectDetailsReducer","rootPersistConfig","key","storage","whitelist","rootReducer","combineReducers","select","weather","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","kelvinToFehrenheit","kelvin","Math","round","toFixed","kelvinToCelcius","date","Date","getDay","index","extractTime","dateTime","split","time","hour","min","sec","year","month","day","getTime","parseInt","connect","weatherIcon","description","high_temp","low_temp","className","src","alt","SwitchMetric","handleSubmit","e","preventDefault","this","props","buttonClicked","onSubmit","variant","onClick","React","Component","dispatch","item","Tab","children","number","id","title","style","marginTop","WeatherDetails","data","numbers","prev","map","list","dt_txt","push","tags","activeTab","tag","dt","icon","main","temp_max","temp_min","SideDetails","row1","row2","row3","label","num","toString","value","count","newNumber","i","length","reverse","join","formatNumber","city","population","getDate","getMonth","getFullYear","API_KEY","Search","handleCountry","a","setStates","selectCountry","yourHandle","getCountryByShort","statesArray","stateOptions","forEach","Object","keys","console","log","Error","message","handleState","setCities","selectState","citiesArray","getCities","options","handleCity","selectCity","getWeather","country","fetch","then","response","json","result","cod","alert","error","getCountries","shortName","name","setCountries","Row","Group","xs","lg","as","Col","role","placeholder","onChange","disabled","disptach","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qaAKeA,EALY,CACzBC,eAAgB,iBAChBC,YAAa,e,yjBCAf,IAAMC,EAAgB,CACpBC,SAAS,EACTC,YAAa,IAsBAC,EAnBQ,WAAoC,IAAnCC,EAAkC,uDAA1BJ,EAAeK,EAAW,uCACxD,OAAQA,EAAOC,MACb,KAAKT,EAAmBC,eACtB,OAAO,EAAP,GACKM,EADL,CAEEH,SAAUG,EAAMH,UAGpB,KAAKJ,EAAmBE,YACtB,OAAO,EAAP,GACKK,EADL,CAEEF,YAAaG,EAAOE,UAGxB,QACE,OAAOH,ICbEI,EATkB,CAC/BC,eAAgB,iBAChBC,cAAe,gBACfC,aAAc,eACdC,WAAY,aACZC,YAAa,cACbC,WAAY,c,yjBCJd,IAAMd,EAAgB,CACpBe,gBAAiB,GACjBC,cAAe,GACfC,aAAc,GACdC,UAAW,GACXC,OAAQ,GACRC,OAAQ,IA8CKC,EA3Cc,WAAoC,IAAnCjB,EAAkC,uDAA1BJ,EAAeK,EAAW,uCAC9D,OAAQA,EAAOC,MACb,KAAKE,EAAyBC,eAC5B,OAAO,KACFL,EADL,CAEEW,gBAAiBV,EAAOE,UAG5B,KAAKC,EAAyBE,cAC5B,OAAO,KACFN,EADL,CAEEc,UAAWb,EAAOE,UAGtB,KAAKC,EAAyBG,aAC5B,OAAO,KACFP,EADL,CAEEY,cAAeX,EAAOE,UAG1B,KAAKC,EAAyBI,WAC5B,OAAO,KACFR,EADL,CAEEe,OAAQd,EAAOE,UAGnB,KAAKC,EAAyBK,YAC5B,OAAO,KACFT,EADL,CAEEa,aAAcZ,EAAOE,UAGzB,KAAKC,EAAyBM,WAC5B,OAAO,KACFV,EADL,CAEEgB,OAAQf,EAAOE,UAGnB,QACE,OAAOH,IC3CPkB,EAAoB,CACxBC,IAAK,OACLC,QAASA,IACTC,UAAW,CAAC,SAAU,YAGlBC,EAAcC,YAAgB,CAClCC,OAAQA,EACRC,QAASA,IAGIC,cAAeR,EAAmBI,G,MCR1C,IAAMK,EAAQC,YAAYN,EAAaO,IAAe,WAAf,cAL5B,MAMLC,EAAYC,YAAaJ,G,yFCXzBK,EAAqB,SAAAC,GAChC,OAAOC,KAAKC,OAA4B,GAAnBF,EAAS,QAAe,EAAI,IAAIG,QAAQ,KAGlDC,EAAkB,SAAAJ,GAC7B,OAAOC,KAAKC,OAAOF,EAAS,QAAQG,QAAQ,KAsBxCE,EAAO,IAAIC,KAqBJC,EAAS,WAAgB,IAAfC,EAAc,uDAAN,EACzBN,EAAQG,EAAKE,SAAWC,EAI5B,OAHIN,GAAS,IACXA,EAAQD,KAAKC,MAAMA,EAAQ,IAErBA,GACN,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,WACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,WACT,QACE,OAAOM,IAIAC,EAAc,SAAAC,GAAa,IAAD,EAChBA,EAASC,MAAM,KADC,mBAC9BN,EAD8B,KACxBO,EADwB,OAGZA,EAAKD,MAAM,KAHC,mBAG9BE,EAH8B,KAGxBC,EAHwB,KAGnBC,EAHmB,OAKVV,EAAKM,MAAM,KALD,mBAkBrC,MAXe,CACbN,KAAMA,EACNO,KAAMA,EACNC,KAAMA,EACNC,IAAKA,EACLC,IAAKA,EACLC,KAbmC,KAcnCC,MAdmC,KAenCC,IAfmC,OAqB1BC,EAAU,SAAAN,GACrB,OAAIA,EAAO,GACH,GAAN,OAAUA,EAAO,GAAjB,MACkB,OAATA,EACH,OACY,KAATA,EACH,OAEA,GAAN,OAAUO,SAASP,GAAnB,OC1DWQ,eAJS,SAAC,GAAD,MAAkB,CACxCzD,QADsB,EAAG4B,QACR5B,WAGJyD,EApCM,SAAC,GAAD,IACnBH,EADmB,EACnBA,IACAI,EAFmB,EAEnBA,YACAC,EAHmB,EAGnBA,YACAC,EAJmB,EAInBA,UACAC,EALmB,EAKnBA,SACA7D,EANmB,EAMnBA,QANmB,OAQnB,kBAAC,IAAD,KACE,wBAAI8D,UAAU,OAAOR,GACrB,yBACEQ,UAAU,eACVC,IAAG,2CAAsCL,EAAtC,WACHM,IAAI,KAEN,uBAAGF,UAAU,eAAeH,GAC5B,uBAAGG,UAAU,gBACX,0BAAMA,UAAU,eACb9D,EAAUwC,EAAgBoB,GAAazB,EAAmByB,GAC3D,kCACC5D,EAAU,IAAM,KAGnB,8BACGA,EAAUwC,EAAgBqB,GAAY1B,EAAmB0B,GAC1D,kCACC7D,EAAU,IAAM,U,6ECzBnBiE,I,iNACJC,aAAe,SAAAC,GACbA,EAAEC,kB,wEAGM,IAAD,EAC4BC,KAAKC,MAAhCC,EADD,EACCA,cAAevE,EADhB,EACgBA,QACvB,OACE,kBAAC,IAAD,CAAMwE,SAAUH,KAAKH,aAAcJ,UAAU,iBAC3C,kBAAC,IAAD,CACEzD,KAAK,SACLoE,QAASzE,EAAO,mBAChB0E,QAASH,GAERvE,EAAU,uBAAyB,0B,GAdnB2E,IAAMC,YA6BlBnB,gBARS,SAAC,GAAD,MAAkB,CACxCzD,QADsB,EAAG4B,QACR5B,YAGQ,SAAA6E,GAAQ,MAAK,CACtCN,cAAe,SAAAO,GAAI,OAAID,ECjCW,CAClCxE,KAAMT,EAAmBC,qBDmCZ4D,CAGbQ,IElCIc,GAAM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAb,OACV,kBAAC,OAAKF,IAAN,CAAUG,GAAE,aAAQD,GAAUE,MAAK,UAAKF,IACtC,kBAAC,IAAD,CAAKG,MAAO,CAAEC,UAAW,KAAOL,KAmDrBM,GA/CQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClBC,EAAU,GACZ5C,EAAQ,EACR6C,EAAO,EACXF,EAAKG,KAAI,SAAAC,GAAS,IACRrC,EAAQT,EAAY8C,EAAKC,QAAzBtC,IACJmC,IAASnC,GACXkC,EAAQK,KAAK,CAAEvC,QAEjBmC,EAAOnC,KAET,IAAMwC,EAAON,EACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,GAAD,OAEF,kBAAC,OAAD,CACEO,UAAW,CACTb,GAAG,MAAD,OAAQvC,EAAOC,MAGlBkD,EAAKJ,KAAI,SAAAM,GAAG,OACX,kBAAC,GAAD,CAAK1E,IAAK0E,EAAI1C,IAAK2B,OAAQtC,EAAOC,GAAQuC,MAAOxC,KAC7CC,GAAgB,EACjB2C,EAAKG,KAAI,SAAAC,GAAS,IAAD,EACM9C,EAAY8C,EAAKC,QAA/BtC,EADQ,EACRA,IAAKL,EADG,EACHA,KACb,GAAI+C,EAAI1C,MAAQA,EACd,OACE,kBAAC,EAAD,CACEhC,IAAKqE,EAAKM,GACV3C,IAAKC,EAAQN,GACbS,YAAaiC,EAAK/D,QAAQ,GAAGsE,KAC7BvC,YAAagC,EAAK/D,QAAQ,GAAG+B,YAC7BC,UAAW+B,EAAKQ,KAAKC,SACrBvC,SAAU8B,EAAKQ,KAAKE,qBCnCzBC,I,MARK,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,KAAf,OAClB,kBAAC,IAAD,CAAK3C,UAAU,gBACb,uBAAGA,UAAU,UAAUyC,GACvB,uBAAGzC,UAAU,UAAU0C,GACvB,uBAAG1C,UAAU,UAAU2C,MCkDZhD,I,MAAAA,aAPS,SAAC,GAAD,IAAG7B,EAAH,EAAGA,QAASD,EAAZ,EAAYA,OAAZ,MAA0B,CAChD1B,YAAa2B,EAAQ3B,YACrBa,gBAAiBa,EAAOb,gBACxBC,cAAeY,EAAOZ,cACtBC,aAAcW,EAAOX,gBAGRyC,EA/CU,SAAC,GAAD,IACRxD,EADQ,EACvBA,YAAeA,YACIa,EAFI,EAEvBA,gBAAmBA,gBACFC,EAHM,EAGvBA,cAAiBA,cACDC,EAJO,EAIvBA,aAAgBA,aAJO,OAMvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK8C,UAAU,qBACZ7D,EACC,kBAAC,IAAD,KACE,kBAAC,GAAD,CACEsG,KAAMvF,EAAeA,EAAa0F,MAAQ,KAC1CF,KAAMxF,EAAeD,EAAc2F,MAAQ,KAC3CD,KAAM3F,EAAkBA,EAAgB4F,MAAQ,OAElD,yCAEGzG,ENjBe,SAAA0G,GAC1B,GAAIA,EAAM,IAAM,OAAOA,EAAIC,WAI3B,IAHA,IAAIC,EAAQF,EAAIC,WAAW7D,MAAM,IAC7B+D,EAAQ,EACRC,EAAY,GACPC,EAAIH,EAAMI,OAAS,EAAGD,GAAK,EAAGA,IACvB,IAAVF,IACFC,EAAUlB,KAAK,KACfiB,EAAQ,GAEVA,GAAS,EACTC,EAAUlB,KAAKgB,EAAMG,IAEvB,OAAOD,EAAUG,UAAUC,KAAK,IMIPC,CAAanH,EAAYoH,KAAKC,YAAc,UAG7D,KACHrH,EACC,kBAAC,EAAD,CACEqD,IAAK,QACLI,YAAazD,EAAY0F,KAAK,GAAG/D,QAAQ,GAAGsE,KAC5CtC,UAAW3D,EAAY0F,KAAK,GAAGQ,KAAKC,SACpCzC,YAAa1D,EAAY0F,KAAK,GAAG/D,QAAQ,GAAG+B,YAC5CE,SAAU5D,EAAY0F,KAAK1F,EAAY0F,KAAKsB,OAAS,GAAGd,KAAKE,WAE7D,KACJ,kBAAC,GAAD,CACEE,KAAI,UAAK5D,IAAL,aNIiBF,EAAK8E,WMH1Bf,KNdS,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEY/D,EAAK+E,YMCbf,KNjBqBhE,EAAKgF,iBMoB7BxH,EAAc,kBAAC,GAAD,CAAgBsF,KAAMtF,EAAY0F,OAAW,U,0DC5B1D+B,I,MAAU,oCACVC,G,2MAsBJC,c,yCAAgB,WAAM9G,GAAN,wBAAA+G,EAAA,+DACuB,EAAKvD,MAAlCwD,EADM,EACNA,UAAWC,EADL,EACKA,cACnBD,EAAU,CAAE5G,OAAQ,KAFN,SAIR6G,EAAc,CAClBjH,oBALY,gCAQc,CACxBkH,KAAWC,kBAAkBnH,EAAgB+F,QATnC,cAQNqB,EARM,OAWNC,EAAe,GACrBD,EAAYE,SAAQ,SAAAjI,IAClBA,EAAQkI,OAAOC,KAAKnI,EAAMe,SACpBwE,KAAI,SAAAZ,GAAI,OAAIqD,EAAatC,KAAK,CAAEgB,MAAO/B,EAAM4B,MAAO5B,UAdhD,UAgBNgD,EAAU,CAAE5G,OAAQiH,IAhBd,0DAkBZI,QAAQC,IAAIC,MAAMC,SAlBN,0D,wDAwBhBC,Y,yCAAc,WAAM5H,GAAN,0BAAA8G,EAAA,+DAKR,EAAKvD,MAHPsE,EAFU,EAEVA,UACAC,EAHU,EAGVA,YACmB/H,EAJT,EAIVA,gBAAmBA,gBAJT,SAMN+H,EAAY,CAChB9H,kBAPU,uBASN6H,EAAU,CACdzH,OAAQ,KAVE,uBAaJ2H,EAAcd,KAAWe,UAC7BjI,EAAgB+F,MAChB9F,EAAc8F,OAEVmC,EAAU,GAjBN,UAkBJF,EAAYpD,KAAI,SAAA2B,GAAI,OACxB2B,EAAQnD,KAAK,CACXgB,MAAOQ,EACPX,MAAOW,OArBD,yBAyBJuB,EAAU,CACdzH,OAAQ6H,IA1BA,0DA6BVT,QAAQC,IAAIC,MAAMC,SA7BR,0D,wDAmCdO,W,yCAAa,WAAMjI,GAAN,gBAAA6G,EAAA,6DACHqB,EAAe,EAAK5E,MAApB4E,WADG,SAELA,EAAW,CACflI,iBAHS,2C,wDAObkD,aAAe,SAAAC,GACbA,EAAEC,iBADgB,MAMd,EAAKE,MAHP6E,EAHgB,EAGhBA,WACmBrI,EAJH,EAIhBA,gBAAmBA,gBACHE,EALA,EAKhBA,aAAgBA,aAEZoI,EAAUtI,EAAgB+F,MAC1BQ,EAAOrG,EAAa0F,MAC1B,IACE2C,MAAM,sDAAD,OACmDhC,EADnD,YAC2D+B,EAD3D,kBAC4E1B,KAE9E4B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACe,QAAfA,EAAOC,IACTP,EAAW,CACTlJ,YAAawJ,IAGfE,MAAM,qBAGZ,MAAOC,GACPD,MAAM,wB,mFA9GR,IACE,IAAM1I,EAAY+G,KAAW6B,eAEvBb,EAAU,GAChB/H,EAAUyE,KAAI,SAAA0D,GAAO,OACnBJ,EAAQnD,KAAK,CACXgB,MAAOuC,EAAQU,UACfpD,MAAO0C,EAAQW,UAGnB1F,KAAKC,MAAM0F,aAAa,CACtB/I,UAAW+H,IAGb,MAAOY,GACPrB,QAAQC,IAAI,mD,+BAmGN,IAAD,EAQHnE,KAAKC,MANPrD,EAFK,EAELA,UACAC,EAHK,EAGLA,OACAC,EAJK,EAILA,OACmBL,EALd,EAKLA,gBAAmBA,gBACFC,EANZ,EAMLA,cAAiBA,cACDC,EAPX,EAOLA,aAAgBA,aAElB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,0BAAMwD,SAAUH,KAAKH,cACnB,kBAAC,IAAK+F,IAAN,KACE,kBAAC,IAAKC,MAAN,CAAYC,GAAI,GAAIC,GAAI,EAAGC,GAAIC,IAAKC,KAAK,QACvC,kBAAC,KAAD,CACElK,KAAK,SACLmK,YACE1J,EAAkBA,EAAgB4F,MAAQ,iBAE5C+D,SAAUpG,KAAKuD,cACfoB,QAAS/H,EAAUA,aAIvB,kBAAC,IAAKiJ,MAAN,CAAYC,GAAI,GAAIC,GAAI,EAAGC,GAAIC,IAAKC,KAAK,QACvC,kBAAC,KAAD,CACElK,KAAK,SACLmK,YACEzJ,EAAgBA,EAAc2F,MAAQ,eAExC+D,SAAUpG,KAAKsE,YACfK,QAAS9H,EAAOA,UAIpB,kBAAC,IAAKgJ,MAAN,CAAYC,GAAI,GAAIC,GAAI,EAAGC,GAAIC,IAAKC,KAAK,QACvC,kBAAC,KAAD,CACElK,KAAK,SACLmK,YACExJ,EAAeA,EAAa0F,MAAQ,cAEtC+D,SAAUpG,KAAK4E,WACfD,QAAS7H,EAAOA,UAIpB,kBAAC,IAAD,CAAKgJ,GAAI,GAAIC,GAAI,EAAGG,KAAK,QACvB,kBAAC,IAAD,CACElK,KAAK,SACLoE,QAAQ,UACRiG,UAAW1J,GAHb,0B,GApKK2D,IAAMC,WAuMZnB,gBAnBS,SAAC,GAAD,IAAG9B,EAAH,EAAGA,OAAH,MAAiB,CACvCV,UAAWU,EAAOV,UAClBC,OAAQS,EAAOT,OACfC,OAAQQ,EAAOR,OACfL,gBAAiBa,EAAOb,gBACxBC,cAAeY,EAAOZ,cACtBC,aAAcW,EAAOX,iBAGI,SAAA2J,GAAQ,MAAK,CACtCX,aAAc,SAAAlF,GAAI,OAAI6F,EC5MkB,CACxCtK,KAAME,EAAyBE,cAC/BH,QD0M4CwE,KAC5CgD,UAAW,SAAAhD,GAAI,OAAI6F,ECnMe,CAClCtK,KAAME,EAAyBI,WAC/BL,QDiMsCwE,KACtC8D,UAAW,SAAA9D,GAAI,OAAI6F,EC1Le,CAClCtK,KAAME,EAAyBM,WAC/BP,QDwLsCwE,KACtCiD,cAAe,SAAAjD,GAAI,OAAI6F,ECpNgB,CACvCtK,KAAME,EAAyBC,eAC/BF,QDkN8CwE,KAC9C+D,YAAa,SAAA/D,GAAI,OAAI6F,EC3Mc,CACnCtK,KAAME,EAAyBG,aAC/BJ,QDyM0CwE,KAC1CoE,WAAY,SAAApE,GAAI,OAAI6F,EClMa,CACjCtK,KAAME,EAAyBK,YAC/BN,QDgMwCwE,KACxCqE,WAAY,SAAArE,GAAI,OAAI6F,EJnNa,CACjCtK,KAAMT,EAAmBE,YACzBQ,QIiNwCwE,QAG3BrB,CAGbkE,IEvMalE,I,MAAAA,aAJS,SAAC,GAAD,MAAkB,CACxCxD,YADsB,EAAG2B,QACJ3B,eAGRwD,EAhBK,WAClB,OACE,6BACE,kBAAC,IAAD,KACE,wBAAIK,UAAU,aAAd,eACA,kBAAC,GAAD,MACA,kBAAC,GAAD,YCDO8G,I,MARH,WACV,OACE,6BACE,kBAAC,GAAD,SCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAD,CAAUrJ,MAAOA,GACf,kBAAC,IAAD,CAAaG,UAAWA,GACtB,kBAAC,GAAD,QAGJmJ,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.0ea70c50.chunk.js","sourcesContent":["const WeatherActionTypes = {\n  BUTTON_CLICKED: \"BUTTON_CLICKED\",\n  GET_WEATHER: \"GET_WEATHER\"\n};\n\nexport default WeatherActionTypes;\n","import WeatherActionTypes from \"./weather.types\";\n\nconst INITIAL_STATE = {\n  celcius: false,\n  weatherData: []\n};\n\nconst weatherReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case WeatherActionTypes.BUTTON_CLICKED:\n      return {\n        ...state,\n        celcius: !state.celcius\n      };\n\n    case WeatherActionTypes.GET_WEATHER:\n      return {\n        ...state,\n        weatherData: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default weatherReducer;\n","const SelectDetailsActionTypes = {\n  SELECT_COUNTRY: \"SELECT_COUNTRY\",\n  SET_COUNTRIES: \"SET_COUNTRIES\",\n  SELECT_STATE: \"SELECT_STATE\",\n  SET_STATES: \"SET_STATES\",\n  SELECT_CITY: \"SELECT_CITY\",\n  SET_CITIES: \"SET_CITIES\"\n};\n\nexport default SelectDetailsActionTypes;\n","import SelectDetailsActionTypes from \"./select.types\";\n\nconst INITIAL_STATE = {\n  selectedCountry: \"\",\n  selectedState: \"\",\n  selectedCity: \"\",\n  countries: [],\n  states: [],\n  cities: []\n};\n\nconst selectDetailsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SelectDetailsActionTypes.SELECT_COUNTRY:\n      return {\n        ...state,\n        selectedCountry: action.payload\n      };\n\n    case SelectDetailsActionTypes.SET_COUNTRIES:\n      return {\n        ...state,\n        countries: action.payload\n      };\n\n    case SelectDetailsActionTypes.SELECT_STATE:\n      return {\n        ...state,\n        selectedState: action.payload\n      };\n\n    case SelectDetailsActionTypes.SET_STATES:\n      return {\n        ...state,\n        states: action.payload\n      };\n\n    case SelectDetailsActionTypes.SELECT_CITY:\n      return {\n        ...state,\n        selectedCity: action.payload\n      };\n\n    case SelectDetailsActionTypes.SET_CITIES:\n      return {\n        ...state,\n        cities: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default selectDetailsReducer;\n","import { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage/session\";\n\nimport weather from \"./weather/weather.reducer\";\nimport select from \"./select/select.reducer\";\n\nconst rootPersistConfig = {\n  key: \"root\",\n  storage: storage,\n  whitelist: [\"select\", \"weather\"]\n};\n\nconst rootReducer = combineReducers({\n  select: select,\n  weather: weather\n});\n\nexport default persistReducer(rootPersistConfig, rootReducer);\n","import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport rootReducer from \"./root.reducer\";\n\nimport logger from \"redux-logger\";\nlet middlewares = [];\nif (process.env.NODE_ENV !== \"production\") {\n  middlewares = [logger];\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nexport const persistor = persistStore(store);\n\nexport default { store, persistor };\n","export const kelvinToFehrenheit = kelvin => {\n  return Math.round((((kelvin - 273.15) * 9) / 5 + 32).toFixed(2));\n};\n\nexport const kelvinToCelcius = kelvin => {\n  return Math.round((kelvin - 273.15).toFixed(2));\n};\n\nexport const weatherIcon = icon => {\n  return `http://openweathermap.org/img/wn/${icon}@2x.png`;\n};\n\nexport const formatNumber = num => {\n  if (num < 1000) return num.toString();\n  let value = num.toString().split(\"\");\n  let count = 0;\n  let newNumber = [];\n  for (let i = value.length - 1; i >= 0; i--) {\n    if (count === 3) {\n      newNumber.push(\",\");\n      count = 0;\n    }\n    count += 1;\n    newNumber.push(value[i]);\n  }\n  return newNumber.reverse().join(\"\");\n};\nconst date = new Date();\nexport const getYear = () => date.getFullYear();\nexport const getMonth = () => {\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n  ];\n  return months[date.getMonth()];\n};\n\nexport const getDate = () => date.getDate();\nexport const getDay = (index = 0) => {\n  let round = date.getDay() + index;\n  if (round >= 7) {\n    round = Math.round(round % 7);\n  }\n  switch (round) {\n    case 0:\n      return \"Sunday\";\n    case 1:\n      return \"Monday\";\n    case 2:\n      return \"Tuesday\";\n    case 3:\n      return \"Wednesday\";\n    case 4:\n      return \"Thursday\";\n    case 5:\n      return \"Friday\";\n    case 6:\n      return \"Saturday\";\n    default:\n      return index;\n  }\n};\n\nexport const extractTime = dateTime => {\n  const [date, time] = dateTime.split(\" \");\n\n  const [hour, min, sec] = time.split(\":\");\n\n  const [year, month, day] = date.split(\"-\");\n\n  const result = {\n    date: date,\n    time: time,\n    hour: hour,\n    min: min,\n    sec: sec,\n    year: year,\n    month: month,\n    day: day\n  };\n\n  return result;\n};\n\nexport const getTime = hour => {\n  if (hour > 12) {\n    return `${hour - 12}PM`;\n  } else if (hour === \"00\") {\n    return `12AM`;\n  } else if (hour === 12) {\n    return `12PM`;\n  } else {\n    return `${parseInt(hour)}AM`;\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Col from \"react-bootstrap/Col\";\n\nimport \"./weather-badge.styles.css\";\n\nimport { kelvinToFehrenheit, kelvinToCelcius } from \"../../utils\";\n\nconst WeatherBadge = ({\n  day,\n  weatherIcon,\n  description,\n  high_temp,\n  low_temp,\n  celcius\n}) => (\n  <Col>\n    <h3 className=\"day\">{day}</h3>\n    <img\n      className=\"weather-icon\"\n      src={`http://openweathermap.org/img/wn/${weatherIcon}@2x.png`}\n      alt=\"\"\n    />\n    <p className=\"description\">{description}</p>\n    <p className=\"temperatures\">\n      <span className=\"temp-detail\">\n        {celcius ? kelvinToCelcius(high_temp) : kelvinToFehrenheit(high_temp)}\n        <sup>o</sup>\n        {celcius ? \"C\" : \"F\"}\n      </span>\n\n      <span>\n        {celcius ? kelvinToCelcius(low_temp) : kelvinToFehrenheit(low_temp)}\n        <sup>o</sup>\n        {celcius ? \"C\" : \"F\"}\n      </span>\n    </p>\n  </Col>\n);\n\nconst mapStateToProps = ({ weather }) => ({\n  celcius: weather.celcius\n});\n\nexport default connect(mapStateToProps)(WeatherBadge);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { buttonClicked } from \"../../redux/weather/weather.actions\";\n\nimport \"./swtich-metric.styles.css\";\n\nclass SwitchMetric extends React.Component {\n  handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  render() {\n    const { buttonClicked, celcius } = this.props;\n    return (\n      <Form onSubmit={this.handleSubmit} className=\"switch-metric\">\n        <Button\n          type=\"submit\"\n          variant={celcius ? `secondary` : `info`}\n          onClick={buttonClicked}\n        >\n          {celcius ? \"Switch to Fahrenheit\" : \"Switch to Celcius\"}\n        </Button>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ weather }) => ({\n  celcius: weather.celcius\n});\n\nconst mapDispatchToProps = dispatch => ({\n  buttonClicked: item => dispatch(buttonClicked(item))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SwitchMetric);\n","import WeatherActionTypes from \"./weather.types\";\n\nexport const buttonClicked = () => ({\n  type: WeatherActionTypes.BUTTON_CLICKED\n});\n\nexport const getWeather = data => ({\n  type: WeatherActionTypes.GET_WEATHER,\n  payload: data\n});\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport WeatherBadge from \"../weather-badge/weather-badge.component\";\nimport { Tabs } from \"@yazanaabed/react-tabs\";\nimport SwitchMetric from \"../../components/switch-metric/switch-metric.component\";\nimport { extractTime, getDay, getTime } from \"../../utils\";\n\nconst Tab = ({ children, number }) => (\n  <Tabs.Tab id={`tab${number}`} title={`${number}`}>\n    <Row style={{ marginTop: 20 }}>{children}</Row>\n  </Tabs.Tab>\n);\n\nconst WeatherDetails = ({ data }) => {\n  const numbers = [];\n  let index = 0;\n  let prev = 0;\n  data.map(list => {\n    const { day } = extractTime(list.dt_txt);\n    if (prev !== day) {\n      numbers.push({ day });\n    }\n    prev = day;\n  });\n  const tags = numbers;\n  return (\n    <Row>\n      <Row>\n        <SwitchMetric />\n      </Row>\n      <Tabs\n        activeTab={{\n          id: `tab${getDay(index)}`\n        }}\n      >\n        {tags.map(tag => (\n          <Tab key={tag.day} number={getDay(index)} title={getDay()}>\n            {(index = index + 1)}\n            {data.map(list => {\n              const { day, hour } = extractTime(list.dt_txt);\n              if (tag.day === day) {\n                return (\n                  <WeatherBadge\n                    key={list.dt}\n                    day={getTime(hour)}\n                    weatherIcon={list.weather[0].icon}\n                    description={list.weather[0].description}\n                    high_temp={list.main.temp_max}\n                    low_temp={list.main.temp_min}\n                  />\n                );\n              }\n            })}\n          </Tab>\n        ))}\n      </Tabs>\n    </Row>\n  );\n};\n\nexport default WeatherDetails;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\n\nimport \"./side-details.styles.css\";\n\nconst SideDetails = ({ row1, row2, row3 }) => (\n  <Col className=\"side-details\">\n    <p className=\"detail\">{row1}</p>\n    <p className=\"detail\">{row2}</p>\n    <p className=\"detail\">{row3}</p>\n  </Col>\n);\n\nexport default SideDetails;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport WeatherBadge from \"../weather-badge/weather-badge.component\";\nimport WeatherDetails from \"../weather-details/weather-details.component\";\nimport SideDetails from \"../side-details/side-details.component\";\nimport { formatNumber, getDate, getDay, getMonth, getYear } from \"../../utils\";\n\nimport \"./weather-container.styles.css\";\n\nconst weatherContainer = ({\n  weatherData: { weatherData },\n  selectedCountry: { selectedCountry },\n  selectedState: { selectedState },\n  selectedCity: { selectedCity }\n}) => (\n  <Container>\n    <Row className=\"weather-container\">\n      {weatherData ? (\n        <Col>\n          <SideDetails\n            row1={selectedCity ? selectedCity.label : null}\n            row2={selectedCity ? selectedState.label : null}\n            row3={selectedCountry ? selectedCountry.label : null}\n          />\n          <p>\n            Population:\n            {weatherData ? formatNumber(weatherData.city.population) : \"00000\"}\n          </p>\n        </Col>\n      ) : null}\n      {weatherData ? (\n        <WeatherBadge\n          day={\"Today\"}\n          weatherIcon={weatherData.list[0].weather[0].icon}\n          high_temp={weatherData.list[0].main.temp_max}\n          description={weatherData.list[0].weather[0].description}\n          low_temp={weatherData.list[weatherData.list.length - 1].main.temp_min}\n        />\n      ) : null}\n      <SideDetails\n        row1={`${getDay()}, ${getDate()}`}\n        row2={getMonth()}\n        row3={getYear()}\n      />\n    </Row>\n    {weatherData ? <WeatherDetails data={weatherData.list} /> : null}\n  </Container>\n);\n\nconst mapStateToProps = ({ weather, select }) => ({\n  weatherData: weather.weatherData,\n  selectedCountry: select.selectedCountry,\n  selectedState: select.selectedState,\n  selectedCity: select.selectedCity\n});\n\nexport default connect(mapStateToProps)(weatherContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport yourHandle from \"countrycitystatejson\";\nimport Select from \"react-select\";\nimport {\n  selectCountry,\n  selectState,\n  selectCity,\n  setCountries,\n  setStates,\n  setCities\n} from \"../../redux/select/select.actions\";\nimport { getWeather } from \"../../redux/weather/weather.actions\";\n\nimport \"./search.styles.css\";\nconst API_KEY = \"e67098245480152331de72027651bd84\";\nclass Search extends React.Component {\n  componentDidMount() {\n    try {\n      const countries = yourHandle.getCountries();\n      // if (this.props.countries.length < 0) {\n      const options = [];\n      countries.map(country =>\n        options.push({\n          value: country.shortName,\n          label: country.name\n        })\n      );\n      this.props.setCountries({\n        countries: options\n      });\n      // }\n    } catch (error) {\n      console.log(\"There was an error getting list of countries\");\n    }\n  }\n\n  // COUNTRY HANDLER\n  handleCountry = async selectedCountry => {\n    const { setStates, selectCountry } = this.props;\n    setStates({ states: [] });\n\n    await selectCountry({\n      selectedCountry\n    });\n    try {\n      const statesArray = await [\n        yourHandle.getCountryByShort(selectedCountry.value)\n      ];\n      const stateOptions = [];\n      statesArray.forEach(state => {\n        state = Object.keys(state.states);\n        state.map(item => stateOptions.push({ value: item, label: item }));\n      });\n      await setStates({ states: stateOptions });\n    } catch (error) {\n      console.log(Error.message);\n    }\n  };\n\n  // STATE HANDLER\n\n  handleState = async selectedState => {\n    const {\n      setCities,\n      selectState,\n      selectedCountry: { selectedCountry }\n    } = this.props;\n    await selectState({\n      selectedState\n    });\n    await setCities({\n      cities: []\n    });\n    try {\n      const citiesArray = yourHandle.getCities(\n        selectedCountry.value,\n        selectedState.value\n      );\n      const options = [];\n      await citiesArray.map(city =>\n        options.push({\n          value: city,\n          label: city\n        })\n      );\n\n      await setCities({\n        cities: options\n      });\n    } catch (error) {\n      console.log(Error.message);\n    }\n  };\n\n  // CITY HANDLER\n\n  handleCity = async selectedCity => {\n    const { selectCity } = this.props;\n    await selectCity({\n      selectedCity\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      getWeather,\n      selectedCountry: { selectedCountry },\n      selectedCity: { selectedCity }\n    } = this.props;\n    const country = selectedCountry.value;\n    const city = selectedCity.label;\n    try {\n      fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}`\n      )\n        .then(response => response.json())\n        .then(result => {\n          if (result.cod === \"200\") {\n            getWeather({\n              weatherData: result\n            });\n          } else {\n            alert(\"City Now found\");\n          }\n        });\n    } catch (error) {\n      alert(\"There was an error\");\n    }\n  };\n\n  render() {\n    const {\n      countries,\n      states,\n      cities,\n      selectedCountry: { selectedCountry },\n      selectedState: { selectedState },\n      selectedCity: { selectedCity }\n    } = this.props;\n    return (\n      <Row>\n        <Col>\n          <form onSubmit={this.handleSubmit}>\n            <Form.Row>\n              <Form.Group xs={12} lg={3} as={Col} role=\"form\">\n                <Select\n                  type=\"search\"\n                  placeholder={\n                    selectedCountry ? selectedCountry.label : \"Select Country\"\n                  }\n                  onChange={this.handleCountry}\n                  options={countries.countries}\n                />\n              </Form.Group>\n\n              <Form.Group xs={12} lg={3} as={Col} role=\"form\">\n                <Select\n                  type=\"search\"\n                  placeholder={\n                    selectedState ? selectedState.label : \"Select State\"\n                  }\n                  onChange={this.handleState}\n                  options={states.states}\n                />\n              </Form.Group>\n\n              <Form.Group xs={12} lg={3} as={Col} role=\"form\">\n                <Select\n                  type=\"search\"\n                  placeholder={\n                    selectedCity ? selectedCity.label : \"Select City\"\n                  }\n                  onChange={this.handleCity}\n                  options={cities.cities}\n                />\n              </Form.Group>\n\n              <Col xs={12} lg={3} role=\"form\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  disabled={!selectedCity}\n                >\n                  Check Weather\n                </Button>\n              </Col>\n            </Form.Row>\n          </form>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = ({ select }) => ({\n  countries: select.countries,\n  states: select.states,\n  cities: select.cities,\n  selectedCountry: select.selectedCountry,\n  selectedState: select.selectedState,\n  selectedCity: select.selectedCity\n});\n\nconst mapDispatchToProps = disptach => ({\n  setCountries: item => disptach(setCountries(item)),\n  setStates: item => disptach(setStates(item)),\n  setCities: item => disptach(setCities(item)),\n  selectCountry: item => disptach(selectCountry(item)),\n  selectState: item => disptach(selectState(item)),\n  selectCity: item => disptach(selectCity(item)),\n  getWeather: item => disptach(getWeather(item))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Search);\n","import SelectDetailsActionTypes from \"./select.types\";\n\nexport const selectCountry = country => ({\n  type: SelectDetailsActionTypes.SELECT_COUNTRY,\n  payload: country\n});\n\nexport const setCountries = countries => ({\n  type: SelectDetailsActionTypes.SET_COUNTRIES,\n  payload: countries\n});\n\nexport const selectState = state => ({\n  type: SelectDetailsActionTypes.SELECT_STATE,\n  payload: state\n});\n\nexport const setStates = states => ({\n  type: SelectDetailsActionTypes.SET_STATES,\n  payload: states\n});\n\nexport const selectCity = city => ({\n  type: SelectDetailsActionTypes.SELECT_CITY,\n  payload: city\n});\n\nexport const setCities = cities => ({\n  type: SelectDetailsActionTypes.SET_CITIES,\n  payload: cities\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Container from \"react-bootstrap/Container\";\nimport WeatherContainer from \"../../components/weather-container/weather-container.component\";\nimport Search from \"../../components/search/search.component\";\n\nimport \"./weather-page.styles.css\";\n\nconst WeatherPage = () => {\n  return (\n    <div>\n      <Container>\n        <h1 className=\"page-name\">Weather App</h1>\n        <Search />\n        <WeatherContainer />\n      </Container>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ weather }) => ({\n  weatherData: weather.weatherData\n});\n\nexport default connect(mapStateToProps)(WeatherPage);\n","import React from \"react\";\nimport WeatherPage from \"./pages/weather-page/weather-page.component\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div>\n      <WeatherPage />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}